<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>SpringBootRestCrudWebMVCApp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>SpringBootRestCrudWebMVCApp</name>
	<description>Spring Boot + Restful</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.0.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Spring Boot actuator configuration -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Spring Boot Dev Tools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Spring security: Adding this tag will generate the default password 
			with username as "user" like "Using generated security password: 0c341556-0d19-42f2-8f09-8670a57b5b27" 
			while running the spring boot app. This will be your password for your all 
			Rest Service calls Go and see the SpringSecurityConfig class in this project 
			for user name and password details -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		
		<!-- Embedded Tomcat -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>


		<!-- jackson-dataformat-xml to convert the XML to java and Java to XML -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		
		<!-- Mysql Connector -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		
		<!-- JSTL for JSP -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>

		<!-- Need this to compile JSP -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- Optional, test for static content, bootstrap CSS-->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>4.0.0-2</version>
		</dependency>

		<!-- Spring boot JDBC -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>

			<!-- Add the below exclution tag for excluding the Tomcat JDBC Connection 
				pooling and add a dependency for your own connection pooling <exclusions> 
				<exclusion> <groupId>org.apache.tomcat</groupId> <artifactId>tomcat-jdbc</artifactId> 
				</exclusion> </exclusions> -->
		</dependency>

		<!-- Use either Spring-boot-starter-jdbc or spring-boot-starter-data-jpa 
			Spring JDBC <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> 
			</dependency> -->


		<!-- Spring boot test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- This will be added to process the Custom Message properties class 
			for application.properties custom messages -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- As weâ€™ll be using Java 8 date and time classes, we first need to add 
			a Maven dependency for the Jackson JSR310 converters. They take care of converting 
			Java 8 date and time classes to JSON representation using the @JsonFormat 
			annotation: -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- The Spring Boot developer tools are not limited to local development. 
					You can also use several features when running applications remotely. Remote 
					support is opt-in. To enable it, you need to make sure that devtools is included 
					in the repackaged archive, as shown in the following listing: Then you need 
					to set a spring.devtools.remote.secret property, as shown in the following 
					example: spring.devtools.remote.secret=mysecret Remote devtools support is 
					provided in two parts: a server-side endpoint that accepts connections and 
					a client application that you run in your IDE. The server component is automatically 
					enabled when the spring.devtools.remote.secret property is set. The client 
					component must be launched manually. -->
				<configuration>
					<mainClass>com.example.demo.SpringBootRestCrudWebMVCAppApplication</mainClass>
					<excludeDevtools>false</excludeDevtools>
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>

<!-- Removing tomcat server and adding Jetty server -->

<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> 
	<exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> 
	</exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.boot</groupId> 
	<artifactId>spring-boot-starter-thymeleaf</artifactId> <exclusions> <exclusion> 
	<groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> 
	</exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.boot</groupId> 
	<artifactId>spring-boot-starter-jetty</artifactId> </dependency> -->

<!-- Enable below settings for Custom log4j2 configuration for spring boot 
	and create log4j2-spring.xml in classpath -->

<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> 
	<exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-logging</artifactId> 
	</exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.boot</groupId> 
	<artifactId>spring-boot-starter-log4j2</artifactId> </dependency> -->

<!-- JSP and JSTL Support -->

<!-- <dependency> <artifactId>org.apache.tomcat.embed</artifactId> 
	<groupId>tomcat-embed-jasper</groupId> <scope>provided</scope> </dependency> 
	<dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> 
	</dependency> -->
